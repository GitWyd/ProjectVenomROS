#!/usr/bin/env python
from venom_perception.TrajPredict import load_data
from sklearn import linear_model
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error as mse
import argparse
import matplotlib.pyplot as plt
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Trajctory Prediction')
    parser.add_argument('-d', '--data',help='data direcotry', required=True)
    parser.add_argument('-s', '--step',help='# previous steps', type=int, required=True)
    args = parser.parse_args()
    datapath = args.data
    step = args.step
    X, y = load_data(datapath, step)
    print X.shape
    print y.shape
    X = X.reshape((X.shape[0], X.shape[1]*X.shape[2]))
    X_train = X[100:,:]
    y_train = y[100:]
    X_test = X[:100,:]
    y_test = y[:100,:]
    clf = linear_model.LinearRegression()
    clf.fit( X_train, y_train)
    y_pred = clf.predict(X_test)

    #
    print mse(y_test, y_pred)

    # Visualize x prediction
    fig = plt.figure()
    fig.add_subplot(2,1,1)
    plt.plot(y_test[:,0],'b', label='x_true')
    plt.plot(y_pred[:,0],'r', label='x_pred')
    plt.ylabel('x pixel rario')
    plt.legend()

    # Visualize 
    fig.add_subplot(2,1,2)
    plt.plot(y_test[:,1],'b', label='y_true')
    plt.plot(y_pred[:,1],'r', label='y_pred')
    plt.ylabel('y pixel rario')
    plt.xlabel('frame #')
    plt.legend()
    plt.show()
